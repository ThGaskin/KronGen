graph:
  based_on: graph

  select:
    graph_group: graph_data

  # Configure the created networkx graph object
  graph_creation:
    at_time_idx: -1                           # Select the last timestep
    node_props: ['degree']  # Select node and edge
    # edge_props: ['weights']                   # properties from the GraphGroup

  # Configure the graph layout
  graph_drawing:

    positions:
      model: spring                   # The spring model positions the nodes
                                      # such that edge lengths are reduced.
      k: 1                            # Tweaking the spring model by adjusting
                                      # the optimal edge length (k) and the
      iterations: 100                 # maximum number of iterations done.
    nodes:
      node_color:
        from_property: degree     # Map the 'some_state' data to the color
      node_size:
        from_property: degree         # Map the node degree to the node size
        scale_to_interval: [10, 200]  # Scale the (degree-)data to the given
                                      # interval (the default size is 300).
    edges:
      width: 0.2
        # from_property: weights        # Map the 'weights' data to the edge
        # scale_to_interval: [0.1, 1.2] # width and scale the data accordingly.

  helpers:
    set_title:
      title: Final Graph

nw_stats:
  based_on: network_stats
  #range: [-1000, 1000]
  bins: 100

nw_stats_sweep:
  based_on: multiverse.errorbars
  select_and_combine:
    fields:
      p_rewire:
        path: cfg/NetworkAnalyser
        transform:
          - getitem: [!dag_prev , create_graph]
          - getitem: [!dag_prev , num_vertices]
      distances:
        path: data/NetworkAnalyser/graph_data/distance_avg
        transform:
          - operation: .isel
            args: [!dag_prev ]
            kwargs:
              time: -1

  transform:
    - operation: .mean
      args: [!dag_tag distances]
      kwargs:
        dim: vertex_idx
      tag: distance_means
    - operation: .std
      args: [!dag_tag distances]
      kwargs:
        dim: vertex_idx
        ddof: 1
      tag: distance_stds
    - operation: xr.Dataset
      kwargs:
        data_vars:
          D: !dag_tag distance_means
          dD: !dag_tag distance_stds
      tag: data

  x: num_vertices
  y: D
  yerr: dD
  capsize: 2
  marker: o
  helpers:
    set_title:
      title: Average shortest path length
    set_labels:
      x: num_vertices
      y: avg shortest path distance
