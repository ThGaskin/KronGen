---
KronGen_default:
  style:
    rc_file: ~/Utopia/KronGen/src/models/KronGen/cfgs/rcParams.yml

dag_defaults:
  dag_options:
    define:
      out_dir:
        - getattr: [!dag_tag dm, dirs]
        - getitem: [!dag_prev , out]
      the_dm:
        - define: !dag_tag dm

# ... Comparison of data and target values .....................................
sweep_stats:
  based_on: [KronGen_default, dag_defaults]
  creator: multiverse
  expected_multiverse_ndim: [1,2,3,4,5]
  module: model_plots.KronGen
  plot_func: multiline
  select_and_combine:
    fields:
      data_val:
        transform:
          - operation: .isel
            args: [!dag_prev ]
            kwargs:
              time: -1
  transform:
    - operation: save_data
      args: [!dag_tag data_val, !dag_tag out_dir]
      tag: save_data
    - operation: xr.Dataset
      kwargs:
        data_vars:
          y: !dag_tag data_val
      tag: data

# ... Graph plot ...............................................................
graph:
  based_on: [.dag.graph, KronGen_default]
  dag_options:
    select_path_prefix: data/KronGen/NetworkAnalyser
  select:
    graph_group: graph_data

  # Configure the created networkx graph object
  graph_creation:
    at_time_idx: -1                           # Select the last timestep
    node_props: ['degree']  # Select node and edge
    #edge_props: ['weights']                   # properties from the GraphGroup

  # Configure the graph layout
  graph_drawing:
    positions:
      model: spring                   # The spring model positions the nodes
                                      # such that edge lengths are reduced.
      k: 1                            # Tweaking the spring model by adjusting
                                      # the optimal edge length (k) and the
      iterations: 5                   # maximum number of iterations done.
    nodes:
      node_color:
       from_property: degree     # Map the 'some_state' data to the color
      node_size:
        from_property: degree         # Map the node degree to the node size
        scale_to_interval: [10, 30]   # Scale the (degree-)data to the given
                                      #  interval (the default size is 300).
    edges:
      width: 0.2
        #from_property: weights        # Map the 'weights' data to the edge
        #scale_to_interval: [0.1, 1.2] # width and scale the data accordingly.
      alpha: 0.2

  helpers:
    set_title:
      title: Graph topology

# ... Errorbar plot ............................................................
error_bar_plot:
  based_on: [.dag.generic.errorbar, KronGen_default]
  expected_multiverse_ndim: [2,3,4,5]
  creator: multiverse
  transform:
    - .mean: [!dag_tag data_val, seed]
      tag: y
    - .std: [!dag_tag data_val, seed]
      kwargs:
        ddof: 1
      tag: yerr

  capsize: 0.1
  marker: o
