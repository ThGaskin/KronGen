# Continuous Integration and Deployment of Utopia Models Repository
---
# ++ Pipeline preparations ++++++++++++++++++++++++++++++++++++++++++++++++++++
variables:
  # Variables for docker images
  BASE_IMAGE: $DOCKER_HUB_USER/brewtopia:latest
  TEST_IMAGE: $DOCKER_HUB_USER/brewtopia-models:latest

  # Docker Hub login command
  DOCKER_HUB_LOGIN: docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  # NOTE Both variables here are secret and protected variables. While the
  #      login command will complain, using --password-stdin actually EXPOSES
  #      the variable! No no.

  # Setting number of processes for build jobs and DIND jobs
  CPUS_BUILD: 12
  CPUS_TEST: 12

  # Global compiler flags
  # NOTE: This should improve the test runtime but might lead to erroneous
  #       coverage reports.
  # NOTE: This will also be applied to the debug build.
  CXXFLAGS: -Og

  # Build flags
  MAKE_FLAGS_BUILD: -j$CPUS_BUILD
  MAKE_FLAGS_TEST: -j$CPUS_TEST

  # ... for certain commands
  RUN_IN_UTOPIA_ENV: $CI_PROJECT_DIR/build/run-in-utopia-env
  ENTER_UTOPIA_ENV: source $CI_PROJECT_DIR/build/activate


# Define the image to use for all stages
image: ${TEST_IMAGE}

stages:
  - update    # update the docker images for testing
  - prep      # prepares the framework
  - build     # build models and tests
  - test      # carry out tests
  - report    # compile reports on testing

workflow:
  rules:
    # Run pipelines on tags and branches
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH


# .. YAML Templates ...........................................................
# This makes includes below easier using the `<<: *anchor_name` syntax

# Create artifacts of the build directory
.artifacts: &artifacts
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/.config        # copied from ~/.config
      - $CI_PROJECT_DIR/.cmake         # copied from ~/.cmake
      - $CI_PROJECT_DIR/build          # created in build stage
    expire_in: 3 hours


# Use the Docker-in-Docker executor and services, log into Docker Hub
.dind: &dind
  image: docker:stable
  tags:
    - docker
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - $DOCKER_HUB_LOGIN




# ++ Job definitions ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# -- Update stage -------------------------------------------------------------
# This stage takes care to build the brewtopia testing images

# .. brewtopia: the base image
# This takes a long time to build and should only be run if the build time of
# brewtopia-models increases significantly.
# To run:
#    - Go to the GitLab pipelines web interface
#    - Select the master branch
#    - Set the BUILD_BREWTOPIA variable to "true"
update:brewtopia:
  <<: *dind
  stage: update
  timeout: 2h
  variables:
    BUILD_BREWTOPIA: "false"
  rules:
    - if: '$BUILD_BREWTOPIA == "true" && $CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  script:
    - docker build -f docker/brewtopia.Dockerfile
                   -t ${BASE_IMAGE}
                   ./
    - docker push ${BASE_IMAGE}

# .. brewtopia-models: the testing image
# This is updated on the master branch _OR_ if BUILD_BREWTOPIA_MODELS was set.
# It updates the dependencies and the Utopia installation in the test image.
update:brewtopia-models:
  <<: *dind
  stage: update
  allow_failure: true
  variables:
    BUILD_BREWTOPIA_MODELS: "false"
  rules:
    - if: '$BUILD_BREWTOPIA_MODELS == "true"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - when: never
  script:
    - docker build -f docker/brewtopia-models.Dockerfile
                   --build-arg BASE_IMAGE=${BASE_IMAGE}
                   -t ${TEST_IMAGE}
                   ./
    - docker push ${TEST_IMAGE}


# -- Preparation stage --------------------------------------------------------
# This stage sets up the Utopia framework, the main dependency of this repo

prep:framework:
  <<: [*artifacts]
  stage: prep
  script:
    # Create a build directory and run cmake
    - cd $CI_PROJECT_DIR && mkdir build && cd build
    - cmake
      -DCPP_COVERAGE=On ..
      -DHDF5_ROOT=$(brew --prefix hdf5)


    # Show available models
    - $RUN_IN_UTOPIA_ENV utopia models ls

    # Carry over user config directory and CMake package registry (to have them
    # available in artifacts)
    - cp -r ~/.config $CI_PROJECT_DIR/
    - cp -r ~/.cmake $CI_PROJECT_DIR/



# -- Build stage --------------------------------------------------------------
# In this stage, the models, all tests, and the documentation are built.
# The artifacts from the build:all job are used in the test stage.

build:all: &build
  <<: *artifacts
  stage: build
  dependencies: ['prep:framework']
  before_script:
    # Copy the frontend-generated configuration, carried over as artifacts,
    # back into the home directory, where the frontend expects it.
    # In the same manner, place the cmake registry where it is expected.
    - &copy_config_to_home cp -r $CI_PROJECT_DIR/.config ~/
    - &copy_cmake_reg_to_home cp -r $CI_PROJECT_DIR/.cmake ~/
  script:
    - cd $CI_PROJECT_DIR/build
    - make $MAKE_FLAGS_BUILD KronGen
    - make $MAKE_FLAGS_BUILD build_tests_model_KronGen

build:debug: &build_debug
  <<: *build
  before_script:
    - *copy_config_to_home
    - *copy_cmake_reg_to_home
    - &fresh_build_dir rm -rf $CI_PROJECT_DIR/build && mkdir -p $CI_PROJECT_DIR/build
    - cd $CI_PROJECT_DIR/build
    - cmake
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_CXX_FLAGS_DEBUG="-Wall -Werror"
        -DHDF5_ROOT=$(brew --prefix hdf5)
      ..

build:debug-clang:
  <<: *build_debug
  before_script:
    - *copy_config_to_home
    - *copy_cmake_reg_to_home
    - *fresh_build_dir
    - cd $CI_PROJECT_DIR/build
    - cmake
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_CXX_FLAGS_DEBUG="-Werror"
        -DHDF5_ROOT=$(brew --prefix hdf5)
      ..

build:docs:
  <<: *build
  allow_failure: true
  script:
    - cd $CI_PROJECT_DIR/build
    - cmake ..
    - make doc
  after_script:
    - cat $CI_PROJECT_DIR/build/doc/sphinx_warnings.log || true
    - cat $CI_PROJECT_DIR/build/doc/doxygen/doxygen_warnings.log || true
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build/doc
      - $CI_PROJECT_DIR/build/doc/doxygen/doxygen_warnings.log
      - $CI_PROJECT_DIR/build/doc/sphinx_warnings.log
    expire_in: 1 week
    expose_as: Documentation




# -- Test stage ---------------------------------------------------------------
# Using the artifacts of the build stage, execute the models and utils tests
test:models: &test_models
  <<: *artifacts
  stage: test
  dependencies: ['build:all']
  needs: ['build:all']
  before_script:
    - *copy_config_to_home
    - *copy_cmake_reg_to_home
    #
    # Need to install requirements again
    - $RUN_IN_UTOPIA_ENV pip install -r python/requirements.txt
    # NOTE Doing this rather than carrying them through as build artifacts from
    #      the prep stage, because these dependencies get installed into the
    #      utopia _framework's_ build directory, which is not located inside
    #      the project directory and thus cannot be part of the artifacts.
    #      Instead of doing the mess with copying that directory etc, we can
    #      just reinstall here, which is fast and straight-forward.
  script:
    # Test all models using the testing framework; this includes Python tests
    - cd build
    - make $MAKE_FLAGS_TEST test_models

test:model_defaults:
  <<: *test_models
  script:
    - $ENTER_UTOPIA_ENV

    # Run each model via the CLI, testing default model and plots configuration
    - utopia run KronGen src/models/KronGen/run_cfg.yml --debug




# -- Report stage -------------------------------------------------------------
# Using the artifacts of the test stage, compile reports on the tests

# Install gcovr and extract coverage reports
report:coverage:
  stage: report
  dependencies:
    - test:models
    - test:model_defaults
  before_script:
    - source $CI_PROJECT_DIR/build/activate
    - pip3 install gcovr
    - cd $CI_PROJECT_DIR/build
    - mkdir coverage
  script:
    # Docs: https://gcovr.com/en/stable/guide.html
    - gcovr
        --root $CI_PROJECT_DIR/
        --filter $CI_PROJECT_DIR/src/
        --exclude '.*tests?/.*'
        --xml coverage/cobertura.xml
        --html coverage/report.html --html-details
        --print-summary

    # Run again for coverage report in GitLab CI/CD log
    - gcovr
        --root $CI_PROJECT_DIR/
        --filter $CI_PROJECT_DIR/src/
        --exclude '.*tests?/.*'
  coverage: '/^lines: (\d+.\d+\%).*$/'   # matches output of --print-summary
  artifacts:
    name: "$CI_JOB_NAME"
    expose_as: Coverage report
    paths:
      - $CI_PROJECT_DIR/build/coverage/
    expire_in: 3 weeks
    reports:
      # https://docs.gitlab.com/ee/user/project/merge_requests/test_coverage_visualization.html
      cobertura: $CI_PROJECT_DIR/build/coverage/cobertura.xml
